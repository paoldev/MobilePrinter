// <Include>
///////////////////////////////////////////////////////////////////////////////
//
// THIS FILE IS AUTOMATICALLY GENERATED.  DO NOT MODIFY IT BY HAND.
//
///////////////////////////////////////////////////////////////////////////////
// </Include>

// <LiteralInclude>
#include "pch.h"
// </LiteralInclude>

// <LiteralInclude>
#include <wsdapi.h>
// </LiteralInclude>

// <LiteralInclude>
#include "MyPrinter_h.h"
// </LiteralInclude>

// <LiteralInclude>
#include "MyPrinterTypes.h"
// </LiteralInclude>

// <MessageTypeDeclarations>
//
// Port type http://schemas.microsoft.com/windows/2006/08/wdp/print/PrintDeviceType
// Message type declarations
//

//
// Port type http://schemas.microsoft.com/windows/2006/08/wdp/print/PrinterServiceType
// Message type declarations
//
extern WSDXML_TYPE REQUESTTYPE_CreatePrintJob;
extern WSDXML_TYPE RESPONSETYPE_CreatePrintJob;
extern WSDXML_TYPE REQUESTTYPE_SendDocument;
extern WSDXML_TYPE RESPONSETYPE_SendDocument;
extern WSDXML_TYPE REQUESTTYPE_AddDocument;
extern WSDXML_TYPE RESPONSETYPE_AddDocument;
extern WSDXML_TYPE REQUESTTYPE_CancelJob;
extern WSDXML_TYPE RESPONSETYPE_CancelJob;
extern WSDXML_TYPE REQUESTTYPE_GetPrinterElements;
extern WSDXML_TYPE RESPONSETYPE_GetPrinterElements;
extern WSDXML_TYPE REQUESTTYPE_GetJobElements;
extern WSDXML_TYPE RESPONSETYPE_GetJobElements;
extern WSDXML_TYPE REQUESTTYPE_GetActiveJobs;
extern WSDXML_TYPE RESPONSETYPE_GetActiveJobs;
extern WSDXML_TYPE REQUESTTYPE_GetJobHistory;
extern WSDXML_TYPE RESPONSETYPE_GetJobHistory;
extern WSDXML_TYPE REQUESTTYPE_SetEventRate;
extern WSDXML_TYPE RESPONSETYPE_SetEventRate;
extern WSDXML_TYPE RESPONSETYPE_PrinterElementsChangeEvent;
extern WSDXML_TYPE RESPONSETYPE_PrinterStatusSummaryEvent;
extern WSDXML_TYPE RESPONSETYPE_PrinterStatusConditionEvent;
extern WSDXML_TYPE RESPONSETYPE_PrinterStatusConditionClearedEvent;
extern WSDXML_TYPE RESPONSETYPE_JobStatusEvent;
extern WSDXML_TYPE RESPONSETYPE_JobEndStateEvent;

//
// Port type http://schemas.microsoft.com/windows/2012/10/wdp/printV12/PrinterServiceV12Type
// Message type declarations
//
extern WSDXML_TYPE REQUESTTYPE_SetPrinterElements;
extern WSDXML_TYPE RESPONSETYPE_SetPrinterElements;

//
// Port type http://schemas.microsoft.com/windows/2014/04/wdp/printV20/PrinterServiceV20Type
// Message type declarations
//
extern WSDXML_TYPE REQUESTTYPE_GetPrintDeviceCapabilities;
extern WSDXML_TYPE RESPONSETYPE_GetPrintDeviceCapabilities;
extern WSDXML_TYPE REQUESTTYPE_GetPrintDeviceResources;
extern WSDXML_TYPE RESPONSETYPE_GetPrintDeviceResources;
extern WSDXML_TYPE REQUESTTYPE_CreatePrintJob2;
extern WSDXML_TYPE RESPONSETYPE_CreatePrintJob2;
extern WSDXML_TYPE REQUESTTYPE_PrepareToPrint;
extern WSDXML_TYPE REQUESTTYPE_GetBidiSchemaExtensions;
extern WSDXML_TYPE RESPONSETYPE_GetBidiSchemaExtensions;
extern WSDXML_TYPE RESPONSETYPE_PrintDeviceCapabilitiesChangeID;

//
// Port type http://www.pwg.org/schemas/2012/4/ipp-everywhere/Print
// Message type declarations
//

// </MessageTypeDeclarations>

// <HostBuilderImplementation>
HRESULT CreateMyPrinterHost(
                LPCWSTR pszDeviceAddress,
                const WSD_THIS_DEVICE_METADATA* pThisDeviceMetadata,
                IPrinterServiceType* pIPrinterServiceType,
                IWSDDeviceHost** ppHostOut,
                IWSDXMLContext** ppContextOut)
{
    HRESULT hr = S_OK;
    IWSDXMLContext* pContext = NULL;
    IWSDDeviceHost* pHost = NULL;

    // 
    // Validate parameters
    // 
    if( NULL == pszDeviceAddress )
    {
        return E_INVALIDARG;
    }

    if( NULL == pThisDeviceMetadata )
    {
        return E_INVALIDARG;
    }

    // pIPrinterServiceType is optional
    if( NULL == ppHostOut )
    {
        return E_POINTER;
    }

    // ppContextOut is optional

    *ppHostOut = NULL;
    if( NULL != ppContextOut )
    {
        *ppContextOut = NULL;
    }

    // 
    // Create XML context for namespace and type registration
    // 
    hr = WSDXMLCreateContext(&pContext);

    // 
    // Register types used by the service
    // 
    if( S_OK == hr )
    {
        hr = MyPrinterRegisterTypes(pContext);
    }

    // 
    // Register namespaces used by the service
    // 
    if( S_OK == hr )
    {
        hr = MyPrinterRegisterNamespaces(pContext);
    }

    // 
    // Create device host
    // 
    if( S_OK == hr )
    {
        hr = WSDCreateDeviceHost(pszDeviceAddress, pContext, &pHost);
    }

    // 
    // Register port types
    // 
    if( S_OK == hr )
    {
        hr = pHost->RegisterPortType(&PortType_PrinterServiceType);
    }

    if( S_OK == hr )
    {
        hr = pHost->RegisterPortType(&PortType_PrinterServiceV12Type);
    }

    if( S_OK == hr )
    {
        hr = pHost->RegisterPortType(&PortType_PrinterServiceV20Type);
    }

    // 
    // Set metadata
    // 
    if( S_OK == hr )
    {
        hr = pHost->SetMetadata(&thisModelMetadata, pThisDeviceMetadata, &hostMetadata, NULL);
    }

    // 
    // Register services and set discoverability
    // 
    if( S_OK == hr && pIPrinterServiceType != NULL )
    {
        hr = pHost->RegisterService(L"http://schemas.microsoft.com/windows/2006/08/wdp/print/PrinterServiceType0", pIPrinterServiceType);
    }

    // 
    // Cleanup
    // 
    if( S_OK == hr && ppContextOut )
    {
        *ppContextOut = pContext;
    }
    else
    {
        if( NULL != pContext )
        {
            pContext->Release();
        }
    }

    if( S_OK == hr )
    {
        *ppHostOut = pHost;
    }
    else
    {
        if( NULL != pHost )
        {
            pHost->Release();
        }
    }

    return hr;
}

// </HostBuilderImplementation>

// <StubDefinitions>
HRESULT __stdcall
Stub_CreatePrintJob
(   IUnknown* server
,   IWSDServiceMessaging* service
,   WSD_EVENT* event
)
{
    HRESULT hr = S_OK;
    IPrinterServiceType* pServer = NULL;

    REQUESTBODY_PrinterServiceType_CreatePrintJob* p = reinterpret_cast<REQUESTBODY_PrinterServiceType_CreatePrintJob*>(event->Soap->Body);
    RESPONSEBODY_PrinterServiceType_CreatePrintJob result;
    ::ZeroMemory(&result,sizeof(result));

    hr = server->QueryInterface( __uuidof(IPrinterServiceType), (void**)&pServer );
    if( S_OK == hr )
    {
        hr =
        pServer->CreatePrintJob
        (   p->body
        ,   &result.body
        );

        pServer->Release();
        pServer = NULL;
    }
    if (SUCCEEDED(hr))
    {
        hr = service->SendResponse(&result,event->Operation,event->MessageParameters);
    }
    if (FAILED(hr))
    {
        hr = service->FaultRequest(&event->Soap->Header,event->MessageParameters, NULL);
    }

    // Clean up memory from outparams
    if (NULL != result.body)
    {
        WSDFreeLinkedMemory( (void*) (result.body) );
    }

    return hr;
}

HRESULT __stdcall
Stub_SendDocument
(   IUnknown* server
,   IWSDServiceMessaging* service
,   WSD_EVENT* event
)
{
    HRESULT hr = S_OK;
    IPrinterServiceType* pServer = NULL;

    REQUESTBODY_PrinterServiceType_SendDocument* p = reinterpret_cast<REQUESTBODY_PrinterServiceType_SendDocument*>(event->Soap->Body);
    RESPONSEBODY_PrinterServiceType_SendDocument result;
    ::ZeroMemory(&result,sizeof(result));

    hr = server->QueryInterface( __uuidof(IPrinterServiceType), (void**)&pServer );
    if( S_OK == hr )
    {
        hr =
        pServer->SendDocument
        (   p->body
        ,   &result.body
        );

        pServer->Release();
        pServer = NULL;
    }
    if (SUCCEEDED(hr))
    {
        hr = service->SendResponse(&result,event->Operation,event->MessageParameters);
    }
    if (FAILED(hr))
    {
        hr = service->FaultRequest(&event->Soap->Header,event->MessageParameters, NULL);
    }

    // Clean up memory from outparams
    if (NULL != result.body)
    {
        WSDFreeLinkedMemory( (void*) (result.body) );
    }

    return hr;
}

HRESULT __stdcall
Stub_AddDocument
(   IUnknown* server
,   IWSDServiceMessaging* service
,   WSD_EVENT* event
)
{
    HRESULT hr = S_OK;
    IPrinterServiceType* pServer = NULL;

    REQUESTBODY_PrinterServiceType_AddDocument* p = reinterpret_cast<REQUESTBODY_PrinterServiceType_AddDocument*>(event->Soap->Body);
    RESPONSEBODY_PrinterServiceType_AddDocument result;
    ::ZeroMemory(&result,sizeof(result));

    hr = server->QueryInterface( __uuidof(IPrinterServiceType), (void**)&pServer );
    if( S_OK == hr )
    {
        hr =
        pServer->AddDocument
        (   p->body
        ,   &result.body
        );

        pServer->Release();
        pServer = NULL;
    }
    if (SUCCEEDED(hr))
    {
        hr = service->SendResponse(&result,event->Operation,event->MessageParameters);
    }
    if (FAILED(hr))
    {
        hr = service->FaultRequest(&event->Soap->Header,event->MessageParameters, NULL);
    }

    // Clean up memory from outparams
    if (NULL != result.body)
    {
        WSDFreeLinkedMemory( (void*) (result.body) );
    }

    return hr;
}

HRESULT __stdcall
Stub_CancelJob
(   IUnknown* server
,   IWSDServiceMessaging* service
,   WSD_EVENT* event
)
{
    HRESULT hr = S_OK;
    IPrinterServiceType* pServer = NULL;

    REQUESTBODY_PrinterServiceType_CancelJob* p = reinterpret_cast<REQUESTBODY_PrinterServiceType_CancelJob*>(event->Soap->Body);
    RESPONSEBODY_PrinterServiceType_CancelJob result;
    ::ZeroMemory(&result,sizeof(result));

    hr = server->QueryInterface( __uuidof(IPrinterServiceType), (void**)&pServer );
    if( S_OK == hr )
    {
        hr =
        pServer->CancelJob
        (   p->body
        ,   &result.body
        );

        pServer->Release();
        pServer = NULL;
    }
    if (SUCCEEDED(hr))
    {
        hr = service->SendResponse(&result,event->Operation,event->MessageParameters);
    }
    if (FAILED(hr))
    {
        hr = service->FaultRequest(&event->Soap->Header,event->MessageParameters, NULL);
    }

    // Clean up memory from outparams
    if (NULL != result.body)
    {
        WSDFreeLinkedMemory( (void*) (result.body) );
    }

    return hr;
}

HRESULT __stdcall
Stub_GetPrinterElements
(   IUnknown* server
,   IWSDServiceMessaging* service
,   WSD_EVENT* event
)
{
    HRESULT hr = S_OK;
    IPrinterServiceType* pServer = NULL;

    REQUESTBODY_PrinterServiceType_GetPrinterElements* p = reinterpret_cast<REQUESTBODY_PrinterServiceType_GetPrinterElements*>(event->Soap->Body);
    RESPONSEBODY_PrinterServiceType_GetPrinterElements result;
    ::ZeroMemory(&result,sizeof(result));

    hr = server->QueryInterface( __uuidof(IPrinterServiceType), (void**)&pServer );
    if( S_OK == hr )
    {
        hr =
        pServer->GetPrinterElements
        (   p->body
        ,   &result.body
        );

        pServer->Release();
        pServer = NULL;
    }
    if (SUCCEEDED(hr))
    {
        hr = service->SendResponse(&result,event->Operation,event->MessageParameters);
    }
    if (FAILED(hr))
    {
        hr = service->FaultRequest(&event->Soap->Header,event->MessageParameters, NULL);
    }

    // Clean up memory from outparams
    if (NULL != result.body)
    {
        WSDFreeLinkedMemory( (void*) (result.body) );
    }

    return hr;
}

HRESULT __stdcall
Stub_GetJobElements
(   IUnknown* server
,   IWSDServiceMessaging* service
,   WSD_EVENT* event
)
{
    HRESULT hr = S_OK;
    IPrinterServiceType* pServer = NULL;

    REQUESTBODY_PrinterServiceType_GetJobElements* p = reinterpret_cast<REQUESTBODY_PrinterServiceType_GetJobElements*>(event->Soap->Body);
    RESPONSEBODY_PrinterServiceType_GetJobElements result;
    ::ZeroMemory(&result,sizeof(result));

    hr = server->QueryInterface( __uuidof(IPrinterServiceType), (void**)&pServer );
    if( S_OK == hr )
    {
        hr =
        pServer->GetJobElements
        (   p->body
        ,   &result.body
        );

        pServer->Release();
        pServer = NULL;
    }
    if (SUCCEEDED(hr))
    {
        hr = service->SendResponse(&result,event->Operation,event->MessageParameters);
    }
    if (FAILED(hr))
    {
        hr = service->FaultRequest(&event->Soap->Header,event->MessageParameters, NULL);
    }

    // Clean up memory from outparams
    if (NULL != result.body)
    {
        WSDFreeLinkedMemory( (void*) (result.body) );
    }

    return hr;
}

HRESULT __stdcall
Stub_GetActiveJobs
(   IUnknown* server
,   IWSDServiceMessaging* service
,   WSD_EVENT* event
)
{
    HRESULT hr = S_OK;
    IPrinterServiceType* pServer = NULL;

    REQUESTBODY_PrinterServiceType_GetActiveJobs* p = reinterpret_cast<REQUESTBODY_PrinterServiceType_GetActiveJobs*>(event->Soap->Body);
    RESPONSEBODY_PrinterServiceType_GetActiveJobs result;
    ::ZeroMemory(&result,sizeof(result));

    hr = server->QueryInterface( __uuidof(IPrinterServiceType), (void**)&pServer );
    if( S_OK == hr )
    {
        hr =
        pServer->GetActiveJobs
        (   p->body
        ,   &result.body
        );

        pServer->Release();
        pServer = NULL;
    }
    if (SUCCEEDED(hr))
    {
        hr = service->SendResponse(&result,event->Operation,event->MessageParameters);
    }
    if (FAILED(hr))
    {
        hr = service->FaultRequest(&event->Soap->Header,event->MessageParameters, NULL);
    }

    // Clean up memory from outparams
    if (NULL != result.body)
    {
        WSDFreeLinkedMemory( (void*) (result.body) );
    }

    return hr;
}

HRESULT __stdcall
Stub_GetJobHistory
(   IUnknown* server
,   IWSDServiceMessaging* service
,   WSD_EVENT* event
)
{
    HRESULT hr = S_OK;
    IPrinterServiceType* pServer = NULL;

    REQUESTBODY_PrinterServiceType_GetJobHistory* p = reinterpret_cast<REQUESTBODY_PrinterServiceType_GetJobHistory*>(event->Soap->Body);
    RESPONSEBODY_PrinterServiceType_GetJobHistory result;
    ::ZeroMemory(&result,sizeof(result));

    hr = server->QueryInterface( __uuidof(IPrinterServiceType), (void**)&pServer );
    if( S_OK == hr )
    {
        hr =
        pServer->GetJobHistory
        (   p->body
        ,   &result.body
        );

        pServer->Release();
        pServer = NULL;
    }
    if (SUCCEEDED(hr))
    {
        hr = service->SendResponse(&result,event->Operation,event->MessageParameters);
    }
    if (FAILED(hr))
    {
        hr = service->FaultRequest(&event->Soap->Header,event->MessageParameters, NULL);
    }

    // Clean up memory from outparams
    if (NULL != result.body)
    {
        WSDFreeLinkedMemory( (void*) (result.body) );
    }

    return hr;
}

HRESULT __stdcall
Stub_SetEventRate
(   IUnknown* server
,   IWSDServiceMessaging* service
,   WSD_EVENT* event
)
{
    HRESULT hr = S_OK;
    IPrinterServiceType* pServer = NULL;

    REQUESTBODY_PrinterServiceType_SetEventRate* p = reinterpret_cast<REQUESTBODY_PrinterServiceType_SetEventRate*>(event->Soap->Body);
    RESPONSEBODY_PrinterServiceType_SetEventRate result;
    ::ZeroMemory(&result,sizeof(result));

    hr = server->QueryInterface( __uuidof(IPrinterServiceType), (void**)&pServer );
    if( S_OK == hr )
    {
        hr =
        pServer->SetEventRate
        (   p->body
        ,   &result.body
        );

        pServer->Release();
        pServer = NULL;
    }
    if (SUCCEEDED(hr))
    {
        hr = service->SendResponse(&result,event->Operation,event->MessageParameters);
    }
    if (FAILED(hr))
    {
        hr = service->FaultRequest(&event->Soap->Header,event->MessageParameters, NULL);
    }

    // Clean up memory from outparams
    if (NULL != result.body)
    {
        WSDFreeLinkedMemory( (void*) (result.body) );
    }

    return hr;
}

// </StubDefinitions>

// <StubDefinitions>
HRESULT __stdcall
Stub_SetPrinterElements
(   IUnknown* server
,   IWSDServiceMessaging* service
,   WSD_EVENT* event
)
{
    HRESULT hr = S_OK;
    IPrinterServiceV12Type* pServer = NULL;

    REQUESTBODY_PrinterServiceV12Type_SetPrinterElements* p = reinterpret_cast<REQUESTBODY_PrinterServiceV12Type_SetPrinterElements*>(event->Soap->Body);
    RESPONSEBODY_PrinterServiceV12Type_SetPrinterElements result;
    ::ZeroMemory(&result,sizeof(result));

    hr = server->QueryInterface( __uuidof(IPrinterServiceV12Type), (void**)&pServer );
    if( S_OK == hr )
    {
        hr =
        pServer->SetPrinterElements
        (   p->body
        ,   &result.body
        );

        pServer->Release();
        pServer = NULL;
    }
    if (SUCCEEDED(hr))
    {
        hr = service->SendResponse(&result,event->Operation,event->MessageParameters);
    }
    if (FAILED(hr))
    {
        hr = service->FaultRequest(&event->Soap->Header,event->MessageParameters, NULL);
    }

    // Clean up memory from outparams
    if (NULL != result.body)
    {
        WSDFreeLinkedMemory( (void*) (result.body) );
    }

    return hr;
}

// </StubDefinitions>

// <StubDefinitions>
HRESULT __stdcall
Stub_GetPrintDeviceCapabilities
(   IUnknown* server
,   IWSDServiceMessaging* service
,   WSD_EVENT* event
)
{
    HRESULT hr = S_OK;
    IPrinterServiceV20Type* pServer = NULL;

    REQUESTBODY_PrinterServiceV20Type_GetPrintDeviceCapabilities* p = reinterpret_cast<REQUESTBODY_PrinterServiceV20Type_GetPrintDeviceCapabilities*>(event->Soap->Body);
    RESPONSEBODY_PrinterServiceV20Type_GetPrintDeviceCapabilities result;
    ::ZeroMemory(&result,sizeof(result));

    hr = server->QueryInterface( __uuidof(IPrinterServiceV20Type), (void**)&pServer );
    if( S_OK == hr )
    {
        hr =
        pServer->GetPrintDeviceCapabilities
        (   p->body
        ,   &result.body
        );

        pServer->Release();
        pServer = NULL;
    }
    if (SUCCEEDED(hr))
    {
        hr = service->SendResponse(&result,event->Operation,event->MessageParameters);
    }
    if (FAILED(hr))
    {
        hr = service->FaultRequest(&event->Soap->Header,event->MessageParameters, NULL);
    }

    // Clean up memory from outparams
    if (NULL != result.body)
    {
        WSDFreeLinkedMemory( (void*) (result.body) );
    }

    return hr;
}

HRESULT __stdcall
Stub_GetPrintDeviceResources
(   IUnknown* server
,   IWSDServiceMessaging* service
,   WSD_EVENT* event
)
{
    HRESULT hr = S_OK;
    IPrinterServiceV20Type* pServer = NULL;

    REQUESTBODY_PrinterServiceV20Type_GetPrintDeviceResources* p = reinterpret_cast<REQUESTBODY_PrinterServiceV20Type_GetPrintDeviceResources*>(event->Soap->Body);
    RESPONSEBODY_PrinterServiceV20Type_GetPrintDeviceResources result;
    ::ZeroMemory(&result,sizeof(result));

    hr = server->QueryInterface( __uuidof(IPrinterServiceV20Type), (void**)&pServer );
    if( S_OK == hr )
    {
        hr =
        pServer->GetPrintDeviceResources
        (   p->body
        ,   &result.body
        );

        pServer->Release();
        pServer = NULL;
    }
    if (SUCCEEDED(hr))
    {
        hr = service->SendResponse(&result,event->Operation,event->MessageParameters);
    }
    if (FAILED(hr))
    {
        hr = service->FaultRequest(&event->Soap->Header,event->MessageParameters, NULL);
    }

    // Clean up memory from outparams
    if (NULL != result.body)
    {
        WSDFreeLinkedMemory( (void*) (result.body) );
    }

    return hr;
}

HRESULT __stdcall
Stub_CreatePrintJob2
(   IUnknown* server
,   IWSDServiceMessaging* service
,   WSD_EVENT* event
)
{
    HRESULT hr = S_OK;
    IPrinterServiceV20Type* pServer = NULL;

    REQUESTBODY_PrinterServiceV20Type_CreatePrintJob2* p = reinterpret_cast<REQUESTBODY_PrinterServiceV20Type_CreatePrintJob2*>(event->Soap->Body);
    RESPONSEBODY_PrinterServiceV20Type_CreatePrintJob2 result;
    ::ZeroMemory(&result,sizeof(result));

    hr = server->QueryInterface( __uuidof(IPrinterServiceV20Type), (void**)&pServer );
    if( S_OK == hr )
    {
        hr =
        pServer->CreatePrintJob2
        (   p->body
        ,   &result.body
        );

        pServer->Release();
        pServer = NULL;
    }
    if (SUCCEEDED(hr))
    {
        hr = service->SendResponse(&result,event->Operation,event->MessageParameters);
    }
    if (FAILED(hr))
    {
        hr = service->FaultRequest(&event->Soap->Header,event->MessageParameters, NULL);
    }

    // Clean up memory from outparams
    if (NULL != result.body)
    {
        WSDFreeLinkedMemory( (void*) (result.body) );
    }

    return hr;
}

HRESULT __stdcall
Stub_PrepareToPrint
(   IUnknown* server
,   IWSDServiceMessaging* service
,   WSD_EVENT* event
)
{
    UNREFERENCED_PARAMETER(service);

    HRESULT hr = S_OK;
    IPrinterServiceV20Type* pServer = NULL;

    REQUESTBODY_PrinterServiceV20Type_PrepareToPrint* p = reinterpret_cast<REQUESTBODY_PrinterServiceV20Type_PrepareToPrint*>(event->Soap->Body);

    hr = server->QueryInterface( __uuidof(IPrinterServiceV20Type), (void**)&pServer );
    if( S_OK == hr )
    {
        pServer->PrepareToPrint
        (   p->body
        );

        pServer->Release();
        pServer = NULL;
    }
    return hr;
}

HRESULT __stdcall
Stub_GetBidiSchemaExtensions
(   IUnknown* server
,   IWSDServiceMessaging* service
,   WSD_EVENT* event
)
{
    HRESULT hr = S_OK;
    IPrinterServiceV20Type* pServer = NULL;

    REQUESTBODY_PrinterServiceV20Type_GetBidiSchemaExtensions* p = reinterpret_cast<REQUESTBODY_PrinterServiceV20Type_GetBidiSchemaExtensions*>(event->Soap->Body);
    RESPONSEBODY_PrinterServiceV20Type_GetBidiSchemaExtensions result;
    ::ZeroMemory(&result,sizeof(result));

    hr = server->QueryInterface( __uuidof(IPrinterServiceV20Type), (void**)&pServer );
    if( S_OK == hr )
    {
        hr =
        pServer->GetBidiSchemaExtensions
        (   p->body
        ,   &result.body
        );

        pServer->Release();
        pServer = NULL;
    }
    if (SUCCEEDED(hr))
    {
        hr = service->SendResponse(&result,event->Operation,event->MessageParameters);
    }
    if (FAILED(hr))
    {
        hr = service->FaultRequest(&event->Soap->Header,event->MessageParameters, NULL);
    }

    // Clean up memory from outparams
    if (NULL != result.body)
    {
        WSDFreeLinkedMemory( (void*) (result.body) );
    }

    return hr;
}

// </StubDefinitions>

